// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using mobileBackendsoftFount.Data;

#nullable disable

namespace mobileBackendsoftFount.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250307195725_AddEnableFieldToOil")]
    partial class AddEnableFieldToOil
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("mobileBackendsoftFount.Models.Benzene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("PriceOfLitre")
                        .HasColumnType("real");

                    b.Property<float>("PriceOfSelling")
                        .HasColumnType("real");

                    b.Property<float>("RateOfEvaporation")
                        .HasColumnType("real");

                    b.Property<float>("RateOfTaxes")
                        .HasColumnType("real");

                    b.Property<float>("RateOfVats")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Benzenes");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.BenzeneBuyReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IncrementalId")
                        .HasColumnType("integer");

                    b.Property<int>("MobilId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MobilReceiptDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("TotalValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("BenzeneBuyReceipts");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.BenzeneGunCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BenzeneType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("EndRoundOneCount")
                        .HasColumnType("bigint");

                    b.Property<long>("EndRoundThreeCount")
                        .HasColumnType("bigint");

                    b.Property<long>("EndRoundTwoCount")
                        .HasColumnType("bigint");

                    b.Property<int>("GunNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("SellingReceiptId")
                        .HasColumnType("integer");

                    b.Property<long>("StartCount")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalSold")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SellingReceiptId");

                    b.ToTable("BenzeneGunCounters");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.BenzeneRecipeProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("BenzeneBuyReceiptId")
                        .HasColumnType("integer");

                    b.Property<float>("EvaporationPercentage")
                        .HasColumnType("real");

                    b.Property<float>("PricePerLiter")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Taxes")
                        .HasColumnType("real");

                    b.Property<float>("TotalValue")
                        .HasColumnType("real");

                    b.Property<float>("ValueOfEvaporation")
                        .HasColumnType("real");

                    b.Property<float>("ValueOfTaxes")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BenzeneBuyReceiptId");

                    b.ToTable("BenzeneRecipeProducts");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.Oil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<float>("PriceOfSelling")
                        .HasColumnType("real");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Order")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("Oils");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.OilBuyProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OilBuyReceiptId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PriceOfBuy")
                        .HasColumnType("numeric");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OilBuyReceiptId");

                    b.ToTable("OilBuyProducts");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.OilBuyReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MonthlyBuyIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MonthlyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Round")
                        .HasColumnType("integer");

                    b.Property<int>("SupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("OilBuyReceipts");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.OilSellProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BoughtAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("BoughtRound")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OilSellRecipeId")
                        .HasColumnType("integer");

                    b.Property<int>("OilSupplierId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ReceiveAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RoundOneAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RoundThreeAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RoundTwoAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SoldAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OilSellRecipeId");

                    b.HasIndex("OilSupplierId");

                    b.ToTable("OilSellProducts");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.OilSellRecipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("OilSellRecipes");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.OilSupplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OilSuppliers");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.SellingReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("OpenAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalLitre92")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalLitre95")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalMoney")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalMoney92")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalMoney95")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("SellingReceipts");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.BenzeneGunCounter", b =>
                {
                    b.HasOne("mobileBackendsoftFount.Models.SellingReceipt", null)
                        .WithMany("BenzeneGunCounters")
                        .HasForeignKey("SellingReceiptId");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.BenzeneRecipeProduct", b =>
                {
                    b.HasOne("mobileBackendsoftFount.Models.BenzeneBuyReceipt", "BenzeneBuyReceipt")
                        .WithMany("Products")
                        .HasForeignKey("BenzeneBuyReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BenzeneBuyReceipt");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.Oil", b =>
                {
                    b.HasOne("mobileBackendsoftFount.Models.OilSupplier", "Supplier")
                        .WithMany("Oils")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.OilBuyProduct", b =>
                {
                    b.HasOne("mobileBackendsoftFount.Models.OilBuyReceipt", null)
                        .WithMany("OilBuyProducts")
                        .HasForeignKey("OilBuyReceiptId");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.OilSellProduct", b =>
                {
                    b.HasOne("mobileBackendsoftFount.Models.OilSellRecipe", "OilSellRecipe")
                        .WithMany("OilSellProducts")
                        .HasForeignKey("OilSellRecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mobileBackendsoftFount.Models.OilSupplier", "OilSupplier")
                        .WithMany()
                        .HasForeignKey("OilSupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OilSellRecipe");

                    b.Navigation("OilSupplier");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.BenzeneBuyReceipt", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.OilBuyReceipt", b =>
                {
                    b.Navigation("OilBuyProducts");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.OilSellRecipe", b =>
                {
                    b.Navigation("OilSellProducts");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.OilSupplier", b =>
                {
                    b.Navigation("Oils");
                });

            modelBuilder.Entity("mobileBackendsoftFount.Models.SellingReceipt", b =>
                {
                    b.Navigation("BenzeneGunCounters");
                });
#pragma warning restore 612, 618
        }
    }
}
